{"version":3,"sources":["App.tsx","components/Context/Context.tsx","components/HomePage/HomePage.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/PeoplePage/PeoplePage.tsx","components/NotFoundPage/NotFoundPage.tsx","index.tsx"],"names":["App","getLinkClass","isActive","classNames","className","role","to","defaultValue","peoples","setPeoples","hasError","setHasError","isLoading","setIsLoading","TableContext","React","createContext","TableProvider","children","useState","values","Provider","value","HomePage","request","url","delay","data","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","client","Loader","PeoplePage","useContext","slug","useParams","renderParentsTableCell","people","peoplesArr","sex","find","parent","name","motherName","fatherName","map","useEffect","Array","isArray","catch","finally","length","born","died","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.306e88d2.chunk.js","sourcesContent":["import { NavLink, Outlet } from 'react-router-dom';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const App = () => {\n  // eslint-disable-next-line max-len\n  const getLinkClass = ({ isActive }: { isActive: boolean }) => classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink\n              className={getLinkClass}\n              to=\"/\"\n            >\n              Home\n            </NavLink>\n\n            <NavLink\n              className={getLinkClass}\n              to=\"/people\"\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import React, { ReactNode, useContext, useState } from 'react';\nimport { Person } from '../../types';\n\ninterface ValuesTypes {\n  peoples: Person[];\n  setPeoples: React.Dispatch<React.SetStateAction<Person[]>>;\n  hasError: boolean;\n  setHasError: React.Dispatch<React.SetStateAction<boolean>>;\n  isLoading: boolean;\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst defaultValue: ValuesTypes = {\n  peoples: [],\n  setPeoples: () => {},\n  hasError: false,\n  setHasError: () => {},\n  isLoading: false,\n  setIsLoading: () => {},\n};\n\nconst TableContext = React.createContext<ValuesTypes>(defaultValue);\n\nexport const TableProvider: React\n  .FC<{ children: ReactNode }> = ({ children }) => {\n  const [peoples, setPeoples] = useState<Person[]>([]);\n\n  const [hasError, setHasError] = useState<boolean>(false);\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const values: ValuesTypes = {\n    peoples,\n    setPeoples,\n    hasError,\n    setHasError,\n    isLoading,\n    setIsLoading,\n  };\n\n  return (\n    <TableContext.Provider value={values}>\n      {children}\n    </TableContext.Provider>\n  );\n};\n\nexport const useTableContext = (): ValuesTypes => {\n  const context = useContext(TableContext);\n\n  return context;\n};\n","import React from 'react';\n\nexport const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","const BASE_URL = 'https://mate-academy.github.io/react_people-table/api/';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { NavLink, useParams } from 'react-router-dom';\nimport { useTableContext } from '../Context/Context';\nimport { client } from '../../utils/fetchClient';\nimport { Loader } from '../Loader';\nimport { Person } from '../../types';\n\nexport const PeoplePage: React.FC = () => {\n  const {\n    peoples,\n    setPeoples,\n    hasError,\n    setHasError,\n    isLoading,\n    setIsLoading,\n  } = useTableContext();\n\n  const { slug } = useParams();\n\n  const renderParentsTableCell = (\n    people: Person,\n    peoplesArr: Person[],\n    sex: string,\n  ) => {\n    const familyMember = peoplesArr\n      .find((parent: Person) => parent.name === (sex === 'f'\n        ? people.motherName\n        : people.fatherName\n      ));\n\n    if (familyMember) {\n      return peoplesArr.map((parent: Person) => {\n        if (parent.name === (sex === 'f'\n          ? people.motherName\n          : people.fatherName)) {\n          return (\n            <td key={parent.slug}>\n              <NavLink\n                to={`${parent.slug}`}\n                className={classNames(\n                  {\n                    'has-text-danger': sex === 'f',\n                  },\n                )}\n              >\n                {parent.name}\n              </NavLink>\n            </td>\n          );\n        }\n\n        return null;\n      });\n    }\n\n    if (sex === 'f') {\n      return <td>{people.motherName ? people.motherName : '-'}</td>;\n    }\n\n    return <td>{people.fatherName ? people.fatherName : '-'}</td>;\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    client.get('people.json')\n      .then((response) => {\n        if (Array.isArray(response)) {\n          setPeoples(response);\n        } else {\n          setHasError(true);\n        }\n      })\n      .catch(() => {\n        setHasError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {hasError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {(peoples?.length === 0 && !hasError) && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {!isLoading && (\n            <table\n              data-cy=\"peopleTable\"\n              className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n            >\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Sex</th>\n                  <th>Born</th>\n                  <th>Died</th>\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {peoples?.map(people => {\n                  const isActive = slug === people.slug;\n\n                  return (\n                    <tr\n                      data-cy=\"person\"\n                      key={people.slug}\n                      className={classNames(\n                        {\n                          'has-background-warning': isActive,\n                        },\n                      )}\n                    >\n                      <td>\n                        <NavLink\n                          to={`${people.slug}`}\n                          className={classNames(\n                            {\n                              'has-text-danger': people.sex === 'f',\n                            },\n                          )}\n                        >\n                          {people.name}\n                        </NavLink>\n                      </td>\n\n                      <td>{people.sex}</td>\n                      <td>{people.born}</td>\n                      <td>{people.died}</td>\n                      {renderParentsTableCell(people, peoples, 'f')}\n                      {renderParentsTableCell(people, peoples, 'm')}\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { TableProvider } from './components/Context/Context';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <TableProvider>\n        <Routes>\n          <Route path=\"/\" element={<App />}>\n            <Route index element={<HomePage />} />\n\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n            <Route path=\"/people\" element={<PeoplePage />}>\n              <Route path=\":slug\" element={<PeoplePage />} />\n            </Route>\n\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Route>\n        </Routes>\n      </TableProvider>\n    </Router>,\n  );\n"],"sourceRoot":""}