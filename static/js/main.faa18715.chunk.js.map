{"version":3,"sources":["App.tsx","components/Context/Context.tsx","components/HomePage/HomePage.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/PeoplePage/PeoplePage.tsx","components/NotFoundPage/NotFoundPage.tsx","index.tsx"],"names":["App","getLinkClass","isActive","classNames","className","role","to","TableContext","React","createContext","undefined","Error","TableProvider","children","useState","peoples","setPeoples","hasError","setHasError","values","isLoading","setIsLoading","Provider","value","HomePage","request","url","delay","data","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","client","Loader","PeoplePage","context","useContext","useTableContext","slug","useParams","useEffect","catch","finally","length","map","people","trClassName","sex","name","born","died","find","mother","motherName","father","fatherName","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.faa18715.chunk.js","sourcesContent":["import { NavLink, Outlet } from 'react-router-dom';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const App = () => {\n  // eslint-disable-next-line max-len\n  const getLinkClass = ({ isActive }: { isActive: boolean }) => classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink\n              className={getLinkClass}\n              to=\"/\"\n            >\n              Home\n            </NavLink>\n\n            <NavLink\n              className={getLinkClass}\n              to=\"/people\"\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import React, { ReactNode, useContext, useState } from 'react';\nimport { Person } from '../../types';\n\ninterface ValuesTypes {\n  peoples: Person[] | undefined;\n  setPeoples: React.Dispatch<React.SetStateAction<Person[] | undefined>>;\n  hasError: boolean;\n  setHasError: React.Dispatch<React.SetStateAction<boolean>>;\n  isLoading: boolean;\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst TableContext = React.createContext<ValuesTypes | undefined>(undefined);\n\nif (!TableContext) {\n  throw new Error('err');\n}\n\n// eslint-disable-next-line max-len\nexport const TableProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [peoples, setPeoples] = useState<Person[] | undefined>(undefined);\n\n  const [hasError, setHasError] = useState<boolean>(false);\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const values: ValuesTypes = {\n    peoples,\n    setPeoples,\n    hasError,\n    setHasError,\n    isLoading,\n    setIsLoading,\n  };\n\n  return (\n    <TableContext.Provider value={values}>\n      {children}\n    </TableContext.Provider>\n  );\n};\n\nexport const useTableContext = (): ValuesTypes => {\n  const context = useContext(TableContext);\n\n  if (!context) {\n    throw new Error('err');\n  }\n\n  return context;\n};\n","import React from 'react';\n\nexport const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","const BASE_URL = 'https://mate-academy.github.io/react_people-table/api/';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { NavLink, useParams } from 'react-router-dom';\nimport { useTableContext } from '../Context/Context';\nimport { client } from '../../utils/fetchClient';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\n\nexport const PeoplePage: React.FC = () => {\n  const {\n    peoples,\n    setPeoples,\n    hasError,\n    setHasError,\n    isLoading,\n    setIsLoading,\n  } = useTableContext();\n\n  const { slug } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    client.get('people.json')\n      .then((response: unknown) => {\n        setPeoples(response as Person[]);\n      })\n      .catch(() => {\n        setHasError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {hasError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {peoples?.length === 0 && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n          {!isLoading && (\n            <table\n              data-cy=\"peopleTable\"\n              className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n            >\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Sex</th>\n                  <th>Born</th>\n                  <th>Died</th>\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {peoples?.map(people => {\n                  const isActive = slug === people.slug;\n                  const trClassName = isActive ? 'has-background-warning' : '';\n\n                  return (\n                    <tr\n                      data-cy=\"person\"\n                      key={people.slug}\n                      className={trClassName}\n                    >\n                      <td>\n                        <NavLink\n                          to={`${people.slug}`}\n                          className={classNames(\n                            {\n                              'has-text-danger': people.sex === 'f',\n                            },\n                          )}\n                        >\n                          {people.name}\n                        </NavLink>\n                      </td>\n\n                      <td>{people.sex}</td>\n                      <td>{people.born}</td>\n                      <td>{people.died}</td>\n                      {peoples.find(mother => {\n                        return mother.name === people.motherName;\n                      }) ? (\n                          peoples.map(mother => {\n                            if (mother.name === people.motherName) {\n                              return (\n                                <td>\n                                  <NavLink\n                                    to={`${mother.slug}`}\n                                    className=\"has-text-danger\"\n                                  >\n                                    {mother.name}\n                                  </NavLink>\n                                </td>\n                              );\n                            }\n\n                            return null;\n                          })\n                        ) : (\n                          <td>{people.motherName ? people.motherName : '-'}</td>\n                        )}\n\n                      {peoples.find(father => {\n                        return father.name === people.fatherName;\n                      }) ? (\n                          peoples.map(father => {\n                            if (father.name === people.fatherName) {\n                              return (\n                                <td>\n                                  <NavLink\n                                    to={`${father.slug}`}\n                                  >\n                                    {father.name}\n                                  </NavLink>\n                                </td>\n                              );\n                            }\n\n                            return null;\n                          })\n                        ) : (\n                          <td>{people.fatherName ? people.fatherName : '-'}</td>\n                        )}\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { TableProvider } from './components/Context/Context';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <TableProvider>\n        <Routes>\n          <Route path=\"/\" element={<App />}>\n            <Route index element={<HomePage />} />\n\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n            <Route path=\"/people\" element={<PeoplePage />}>\n              <Route path=\":slug\" element={<PeoplePage />} />\n            </Route>\n\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Route>\n        </Routes>\n      </TableProvider>\n    </Router>,\n  );\n"],"sourceRoot":""}